import AQFED.Math:cheb2interp
export bachelierImpliedVolatilityChebyshev

const xs = [0.0, 0.4217386245727539, 0.55084228515625, 0.7421875, 1.0]

# chebyshev polynomial coefficients for near ATM.
# the first one is actually not used in practice as < alpha
const coeff2D = [1.14576494380569338e+00 4.93894933953413273e-01 9.50848289426610774e-03 -5.06355533662371324e-03 4.78423883450561967e-03 -4.77768365662242268e-03 4.31148557509235513e-03 -3.46551488716320081e-03 2.50256954038635855e-03 -1.62838301518110763e-03 9.34986084592788675e-04 -4.16007075300378268e-04
    2.46312728450416518e+00 1.58182641253635958e-01 1.78609193027728117e-04 -5.24205756984930796e-06 2.42783643139975411e-07 -1.26411952587526635e-08 6.62072274170638910e-10 -3.28548007462259518e-11 1.43435488794632436e-12 -4.43939091051224089e-14 -4.66788255924194092e-16 2.51814352897481322e-16
    3.25251121005064947e+00 2.36620165648468411e-01 2.76097303278112960e-04 -7.93794944867281994e-06 3.82951035161601677e-07 -2.23413365448680311e-08 1.39731324873485435e-09 -8.89821509967213342e-11 5.61580195125996316e-12 -3.44275787487274692e-13 2.00275088405750998e-14 -1.06027978363402757e-15
    4.36904846957001158e+00 3.21751325652842701e-01 3.61642571169418421e-04 -9.31203489051275572e-06 4.04566190562942834e-07 -2.21891236355190701e-08 1.36269939039333248e-09 -8.84037949667989474e-11 5.87957127773745941e-12 -3.94308493169714526e-13 2.63924286682272227e-14 -1.74264358622528222e-15]

const multiplier = [0.0, 0.05263201943695479, 0.21052807774781915, 0.5614082073275177, 0.816593756112753, 1.1877727361640043, 1.6525533720542671, 2.1152683162294617, 2.7075434447737114, 3.5363832748064796, 4.618949583420708, 6.03291374161072, 7.960958339445074, 10.505182138649168, 13.791418602534293, 18.10565724230143, 23.769478225790593, 31.61031909507736, 42.25713675373266, 57.16156940002939, 77.94067518725711, 107.4899008643115, 149.65283274650574, 210.7177734375, 300.0]

const beta = reverse(multiplier) .* log(10)
const embeta = exp.(-beta)

# chebyshev polynomials coefficients for OTM options
const coeffOTM =
    [2.30600323192718861e+03 2.05043083247075430e+02 2.39536277360759692e-02 -1.42320183116055924e-03 9.50461092350134341e-05 -6.76621453751332676e-06 5.01484602302735643e-07 -3.82131995214250120e-08 2.97139625170794220e-09 -2.34640960131565624e-10 1.87540752543154288e-11 -1.50373459515431430e-12
        1.61575635045128161e+03 1.40084371997021321e+02 2.26962330718600939e-02 -1.31117114957347044e-03 8.51093520283368612e-05 -5.88732846343277027e-06 4.23899643148261688e-07 -3.13740847135900273e-08 2.36919630414626526e-09 -1.81662888200026136e-10 1.40970338433297985e-11 -1.09771158678507572e-12
        1.14244577839507951e+03 9.65746640508781269e+01 2.14832644611544811e-02 -1.20564164636571738e-03 7.59850454702649215e-05 -5.10147035894696720e-06 3.56396444528921101e-07 -2.55872295482973635e-08 1.87386926488722860e-09 -1.39317682354677504e-10 1.04808434868854032e-11 -7.91370824068396682e-13
        8.14221183081155800e+02 6.75408915344469563e+01 2.05749962283125476e-02 -1.12765405950729131e-03 6.93590677615677035e-05 -4.54215064646345091e-06 3.09391570448861576e-07 -2.16498374498513000e-08 1.54488140956553519e-09 -1.11884629996816779e-10 8.19721227056071115e-12 -6.02828138980731756e-13
        5.84426844422268118e+02 4.73595395993986656e+01 1.94939514080227326e-02 -1.03704438926066275e-03 6.18556573238324462e-05 -3.92541502257179573e-06 2.58960138274379020e-07 -1.75416842073835410e-08 1.21122172934082963e-09 -8.48498666448666160e-11 6.01114446148331094e-12 -4.27486159462142734e-13
        4.22034946751639438e+02 3.38390285345843012e+01 1.89105365344666258e-02 -9.87111358507962184e-04 5.76987137039118155e-05 -3.58489169958060618e-06 2.31361798193637568e-07 -1.53219693536025759e-08 1.03372328551015628e-09 -7.07210809686948194e-11 4.89072696563857726e-12 -3.39455433855193462e-13
        3.06268330750858979e+02 2.40471850984675086e+01 1.79105848598168256e-02 -9.05304056844595767e-04 5.11548195499361534e-05 -3.06854551496427466e-06 1.90998844104128161e-07 -1.21884793208863571e-08 7.91762537850722766e-10 -5.21181606196934139e-11 3.46564490970099708e-12 -2.31243049172151419e-13
        2.23005332604247087e+02 1.75862405473772547e+01 1.77868230923009969e-02 -8.89981137147263465e-04 4.96701566718315586e-05 -2.93775321393517272e-06 1.80040252307262132e-07 -1.12982470917758534e-08 7.20946540939965004e-10 -4.65702138075843620e-11 3.03604866667469958e-12 -1.98471412648994867e-13
        1.62667972355314561e+02 1.25851758168342602e+01 1.67593410462559926e-02 -8.06865964259929533e-04 4.31997788710271265e-05 -2.44544045342883331e-06 1.43159464693583910e-07 -8.56690020068779026e-09 5.20470929477186976e-10 -3.19626959072382770e-11 1.97822139293063986e-12 -1.22657622803902416e-13
        1.18566493530120553e+02 9.46659775809801829e+00 1.73770992840480074e-02 -8.42034820952365952e-04 4.51933336800977188e-05 -2.55638600031097696e-06 1.49131751734994084e-07 -8.87090260969446832e-09 5.34450977458847880e-10 -3.24729666711432765e-11 1.98391152291943098e-12 -1.21158736934964368e-13
        8.54623767868520474e+01 7.08648876487567403e+00 1.80734494773889948e-02 -8.79158514673574593e-04 4.71032350485270146e-05 -2.64751380023519790e-06 1.52833265837117697e-07 -8.96059077944794021e-09 5.30015695740678664e-10 -3.14882916760790340e-11 1.87290244808356351e-12 -1.10860466510251981e-13
        6.05832566290490249e+01 5.35345537208291944e+00 1.95356468722009541e-02 -9.66658570039372056e-04 5.22578043412872984e-05 -2.94286978307513055e-06 1.69063278706094856e-07 -9.79612142108334273e-09 5.68362021009136972e-10 -3.28389051927897973e-11 1.88036701042893552e-12 -1.05856918363037906e-13
        4.20438717065676855e+01 3.91746142694269928e+00 2.02750971539916586e-02 -9.91367660155324879e-04 5.23131418135476319e-05 -2.84242481658860988e-06 1.55624212074750491e-07 -8.47220451755257609e-09 4.53656931664751582e-10 -2.36134334860705219e-11 1.17534045690193341e-12 -5.43001544535916602e-14
        2.87418835904141439e+01 2.73641102606634634e+00 1.92845978996126176e-02 -8.81921217829938252e-04 4.27034371821736626e-05 -2.08572918672709561e-06 1.00044714573384490e-07 -4.59988790004481300e-09 1.95806940270498618e-10 -7.16309558001473350e-12 1.71258929777425809e-13 3.83833731077658905e-15
        1.93543305481815686e+01 1.95906208202102228e+00 1.93135538600447271e-02 -8.34150301839725063e-04 3.69447482819965027e-05 -1.58223352984381638e-06 6.20536482013937047e-08 -1.99984938451233229e-09 3.16007760447780798e-11 2.42628930751835339e-12 -3.40720384263683124e-13 2.79759254187625859e-14
        1.27082048601427715e+01 1.36630289513067926e+00 1.85821399756413361e-02 -7.24350366367430766e-04 2.72372921197427225e-05 -8.83395001301227846e-07 1.82450391048389667e-08 4.19109646214676921e-10 -8.31011627960832627e-11 6.63926417834988853e-12 -4.03348029883486892e-13 2.01080319521359718e-14
        8.25768664193382484e+00 8.64284873544575172e-01 1.44356983322932973e-02 -4.40953083333075742e-04 1.13797502401283676e-05 -1.48931535904666241e-07 -7.64385198930138952e-09 8.14837492189014312e-10 -4.64009806227305032e-11 1.91657811562235157e-12 -5.19516934912295108e-14 -7.71832950452140827e-17
        5.37399664023837076e+00 5.80508797906514662e-01 1.22255955381050784e-02 -2.90168333061641029e-04 3.97210055405662473e-06 1.13122593045570815e-07 -1.19881618657853447e-08 5.62804550979071614e-10 -1.59217445115466664e-11 4.41188523272878353e-14 2.71523518301310337e-14 -1.98377652640796949e-15
        3.26687382369443746e+00 4.69794428067438763e-01 1.60977402884881701e-02 -3.17785406710487833e-04 -2.78170698806923216e-06 6.51860031800023276e-07 -3.31395243703917697e-08 6.51855655888523646e-10 3.71668186551210071e-11 -4.28550383884439312e-12 2.07377016077089813e-13 -3.30082019935399927e-15
        1.78792847895452378e+00 2.74109133572780550e-01 1.20722645379343248e-02 -8.29580374604372054e-05 -8.56476604286481894e-06 4.31400725863084110e-07 -3.36823221341919302e-09 -7.00281644535294660e-10 4.22311998791719254e-11 -6.13800490236356025e-13 -6.65355859554031427e-14 5.16074398092519539e-15
        9.89202680545164026e-01 1.31616375453412121e-01 5.76124504188479415e-03 2.57095969945979021e-05 -3.38132571124674654e-06 3.80592728338321150e-08 2.70328591323312130e-09 -1.13648818350287395e-10 -2.98043081534560856e-13 1.60271224509135513e-13 -4.43832503593936826e-15 -8.94170523415808615e-17
        4.97231967506140016e-01 1.10588522091192326e-01 9.28845342365719299e-03 2.35157347934832338e-04 -1.06786619980406935e-05 -3.85205611446075403e-07 3.05681991112453435e-08 4.74449512974709131e-10 -9.64080655394661096e-11 7.96440770014365182e-13 2.76386293521114245e-13 -9.64490142265403726e-15
        2.34773761638268075e-01 2.82691112989171545e-02 1.38574497701665850e-03 2.88585623712612742e-05 -8.80883333178174867e-08 -1.33101610268625247e-08 1.12451491663278291e-11 7.87035584116022092e-12 -1.13117181931959606e-14 -5.15279626949370386e-15 1.86890463893239915e-17 3.52592989927947130e-18
        1.66410700339358342e-01 7.13999302958060519e-03 1.28165917685898399e-04 1.07103294197533383e-06 1.06129363753704020e-09 -5.09469300094657841e-11 -1.78866252343168219e-13 3.13031595844065657e-15 1.64297388388154339e-17 -2.18231596497765135e-19 -1.39959311193082899e-21 1.63984108260708571e-23]

@inline function etaChebyshev(u::T) where {T}
    if u < 1e-2 * one(T)
        return -u * (0.5 + u * (1.0 / 12 + u * (1.0 / 24 + u * (19.0 / 720 + u * (3.0 / 160 + u * (863.0 / 60480 + u * 275.0 / 24192))))))
    elseif u < 5e-2 * one(T)
        return one(T) - u * (0.5 + u * (1.0 / 12 + u * (1.0 / 24 + u * (19.0 / 720 + u * (3.0 / 160 + u * (863.0 / 60480 + u * (275.0 / 24192 + u * (33953.0 / 3628800 + u * (8183.0 / 1036800)))))))))
    else
        return -u / log1p(-u)
    end
end

function bachelierImpliedVolatilityChebyshev(price::Number,
    isCall::Bool,
    strike::Number,
    tte::Number,
    forward::Number,
    discountDf::Number,
)::Number

    sign = if isCall
        1
    else
        -1
    end
    x = (forward - strike) * sign
    if abs(x) < eps(forward)
        return price / discountDf * sqrt(2 * pi / tte)
    end
    z = if x > 0
        (price / discountDf - x) / x
    else
        -price / discountDf / x
    end

    return if z < 0.20
        j = lookup(embeta, z)
        u = zofy(z, beta[j+1], beta[j])

        a = 0.0
        b = 1.0
        hz = cheb2interp(@view(coeffOTM[j, :]), u,a, b)
        abs(x) / (sqrt(hz * tte))
    else
        putPrice = if x <= 0
            price / discountDf - x
        else
            price / discountDf
        end
        z = abs(x) / putPrice
        u = etaChebyshev(z)
        index = lookup(xs, u)
        hz = cheb2interp(@view(coeff2D[index, :]),u, xs[index], xs[index+1])
        putPrice * hz / sqrt(tte)
    end

end

function lookup(array::AbstractArray{T}, z) where {T}
    return searchsortedlast(array,z)
    # resultIdx = 1
    # @inbounds for i = eachindex(array)
    #     if array[i] < z
    #         resultIdx = i
    #     end
    # end
    # return resultIdx
end
